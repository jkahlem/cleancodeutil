/**
* THE CODE OF THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY.
*/
package csv

import (
	"reflect"
	"returntypes-langserver/common/debug/log"
)
func (t Method) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalMethod(records [][]string) []Method {
	typ := reflect.TypeOf(Method{})
	result := make([]Method, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(Method); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalMethod(records []Method) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}

func (t Class) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalClass(records [][]string) []Class {
	typ := reflect.TypeOf(Class{})
	result := make([]Class, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(Class); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalClass(records []Class) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}

func (t TypeConversion) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalTypeConversion(records [][]string) []TypeConversion {
	typ := reflect.TypeOf(TypeConversion{})
	result := make([]TypeConversion, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(TypeConversion); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalTypeConversion(records []TypeConversion) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}

func (t ReturnTypesDatasetRow) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalReturnTypesDatasetRow(records [][]string) []ReturnTypesDatasetRow {
	typ := reflect.TypeOf(ReturnTypesDatasetRow{})
	result := make([]ReturnTypesDatasetRow, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(ReturnTypesDatasetRow); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalReturnTypesDatasetRow(records []ReturnTypesDatasetRow) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}

func (t MethodGenerationDatasetRow) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalMethodGenerationDatasetRow(records [][]string) []MethodGenerationDatasetRow {
	typ := reflect.TypeOf(MethodGenerationDatasetRow{})
	result := make([]MethodGenerationDatasetRow, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(MethodGenerationDatasetRow); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalMethodGenerationDatasetRow(records []MethodGenerationDatasetRow) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}

func (t TypeLabel) ToRecord() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func UnmarshalTypeLabel(records [][]string) []TypeLabel {
	typ := reflect.TypeOf(TypeLabel{})
	result := make([]TypeLabel, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).(TypeLabel); ok {
			result = append(result, c)
		}
	}
	return result
}

func MarshalTypeLabel(records []TypeLabel) [][]string {
	result := make([][]string, len(records))
	for i := range records {
		result[i] = records[i].ToRecord()
	}
	return result
}
