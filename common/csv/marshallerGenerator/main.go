package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path"
	"text/template"
)

type TemplateAttributes struct {
	TypeName string
}

func main() {
	targetFile := os.Getenv("GOFILE")
	srcFileNode, err := parser.ParseFile(token.NewFileSet(), targetFile, nil, 0)
	if err != nil {
		panic(err)
	}

	typeNames := make([]string, 0, 1)
	ast.Inspect(srcFileNode, func(n ast.Node) bool {
		if n == nil {
			return false
		}
		if typeSpec, ok := n.(*ast.TypeSpec); ok {
			if _, ok := typeSpec.Type.(*ast.StructType); ok {
				typeNames = append(typeNames, typeSpec.Name.Name)
			}
		}
		return true
	})

	if outputFile, err := os.Create(path.Join(path.Dir(targetFile), "Marshaller.go")); err != nil {
		log.Fatal(err)
	} else {
		fmt.Fprint(outputFile, HeaderNote)
		fmt.Fprintf(outputFile, "package %s\n", srcFileNode.Name.Name)
		fmt.Fprint(outputFile, Imports)
		for _, typeName := range typeNames {
			if tmpl, err := template.New("boilerplate").Parse(marshallerTemplate); err != nil {
				log.Fatal(err)
			} else if err := tmpl.Execute(outputFile, TemplateAttributes{TypeName: typeName}); err != nil {
				log.Fatal(err)
			}
		}
	}
}

const HeaderNote = `/**
* THE CODE OF THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY.
*/
`

const Imports = `
import (
	"reflect"
	"returntypes-langserver/common/log"
)`

var marshallerTemplate = `
func (t {{.TypeName}}) ToRecordTEST() []string {
	if record, err := marshal(reflect.ValueOf(t)); err != nil {
		log.Error(err)
		log.ReportProblem("An error occured while marshalling data")
		return nil
	} else {
		return record
	}
}

func Unmarshal{{.TypeName}}TEST(records [][]string) []{{.TypeName}} {
	typ := reflect.TypeOf({{.TypeName}}{})
	result := make([]{{.TypeName}}, 0, len(records))
	for _, record := range records {
		if unmarshalled, err := unmarshal(record,  typ); err != nil {
			log.Error(err)
			log.ReportProblem("An error occured while unmarshalling data")
		} else if c, ok := (unmarshalled.Interface()).({{.TypeName}}); ok {
			result = append(result, c)
		}
	}
	return result
}
`
