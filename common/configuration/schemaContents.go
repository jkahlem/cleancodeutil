/**
* THE CODE OF THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE EDITED MANUALLY.
 */
package configuration

var SchemaMap map[string]string

func initSchemaMap() {
	SchemaMap = make(map[string]string)
	SchemaMap["configuration/configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "configuration.schema.json",
    "title": "Configuration file",
    "description": "Contains global configurations for the program",
    "type": "object",
    "properties": {
        "cloner": {
            "description": "Configurations for cloning",
            "type": "object",
            "$ref": "cloner-configuration.schema.json"
        },
        "projects": {
            "description": "A list of projects which should be used for dataset creation. Can also be a string pointing to a json file containing these project definitions.",
            "type": ["array", "string"],
            "items": {
                "$ref": "../projects/project-definition.schema.json",
                "type": ["object", "string"]
            }
        },
        "mainOutputDir": {
            "description": "The main output dir containing some processing results and the final dataset",
            "type": "string"
        },
        "defaultLibraries": {
            "description": "A list of mapping files in csv format for default java libraries (and other libraries to use)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "defaultTypeClasses": {
            "description": "A file containg type mappings and the final labels",
            "type": "string"
        },
        "crawler": {
            "description": "Configurations for the crawler",
            "type": "object",
            "$ref": "crawler-configuration.schema.json"
        },
        "forceExtraction": {
            "description": "If true, will always recollect the data from the crawled xml files",
            "type": "boolean"
        },
        "predictor": {
            "description": "Configurations for the predictor connection.",
            "type": "object",
            "$ref": "predictor-configuration.schema.json"
        },
        "strictMode": {
            "description": "If true, the program will stop running when an error occurs which may influence the dataset output",
            "type": "boolean"
        },
        "logger": {
            "description": "Configurations for logging",
            "type": "object",
            "$ref": "logger-configuration.schema.json"
        },
        "connection": {
            "description": "Configurations for connections",
            "type": "object",
            "$ref": "connections-configuration.schema.json"
        },
        "statistics": {
            "description": "Configurations for statistics",
            "type": "object",
            "$ref": "statistics-configuration.schema.json"
        },
        "createMethodOutputPerProject": {
            "description": "If true, writes all methods into an excel file per project.",
            "type": "boolean"
        },
        "excelSets": {
            "description": "Configuration for excel sets. Can also be a string pointing to a json file containing excel set definitions.",
            "type": ["string", "array"],
            "items": {
                "$ref": "../datasets/excel-set-configuration.schema.json",
                "type": "object"
            }
        },
        "evaluation": {
            "description": "Configurations for evaluations",
            "type": "object",
            "$ref": "evaluation-configuration.schema.json"
        },
        "datasets": {
            "description": "Configurations for datasets. Can also be a string pointing to a json file containing dataset definitions.",
            "type": ["string", "array"],
            "items": {
                "$ref": "../datasets/dataset/configuration.schema.json",
                "type": "object"
            }
        },
        "modelType": {
            "description": "Defines for which model type the dataset should be generated / which model type should be trained",
            "type": "string",
            "enum": ["MethodGenerator", "ReturnTypesValidator"]
        },
        "skipIfOutputExists": {
            "description": "If true, skips all processes (like dataset creation, excel set creation etc.) if the output files exists",
            "type": "boolean"
        },
        "languageServer": {
            "description": "Configurations for the language server",
            "type": "object",
            "$ref": "language-server-configuration.schema.json"
        },
        "createStatistics": {
            "description": "Creates statistics on preprocessed data (token counts).",
            "type": "boolean"
        }
    },
    "required": ["mainOutputDir"]
}`
	SchemaMap["configuration/cloner-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "cloner-configuration.schema.json",
    "title": "Cloner Configuration",
    "description": "Contains configurations regarding cloning of projects",
    "type": "object",
    "properties": {
        "useCommandLineTool": {
            "description": "If true, uses the command line git tool to clone projects. This allows the use of some options (like '--filter') which speed up the clone process. 'git' must be available on PATH to use this.",
            "type": "boolean"
        },
        "maximumCloneSize": {
            "description": "Maximum size in kilobytes of the (github) repositories to clone. If exceeded, clone process will be skipped.",
            "type": "number",
            "minimum": 0
        },
        "skip": {
            "description": "If true, skip clone process.",
            "type": "boolean"
        },
        "outputDir": {
            "description": "The directory where projects will be cloned to.",
            "type": "string"
        }
    }
}`
	SchemaMap["configuration/crawler-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "crawler-configuration.schema.json",
    "title": "Crawler Configuration",
    "description": "Contains configurations concerning the crawler",
    "type": "object",
    "properties": {
        "executablePath": {
            "description": "Path to the .jar file of the crawler version which should be used.",
            "type": "string"
        },
        "defaultJavaVersion": {
            "description": "The java version the crawler should use to parse the java files if no version is set for the project. If zero, then it is left to the parser library to decide, which version to use.",
            "type": "number",
            "minimum": 0,
            "maximum": 17
        }
    }
}`
	SchemaMap["configuration/connections-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "connections-configuration.schema.json",
    "title": "Connections Configuration",
    "description": "Contains configurations regarding connection handling in general.",
    "type": "object",
    "properties": {
        "timeout": {
            "description": "The time to wait in ms after a failing connection attempt",
            "type": "number",
            "minimum": 0
        },
        "reconnectionAttempts": {
            "description": "The amount of attempts for trying to reconnect",
            "type": "number"
        }
    }
}`
	SchemaMap["configuration/logger-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "logger-configuration.schema.json",
    "title": "Logger Configuration",
    "description": "Contains configurations regarding logging",
    "type": "object",
    "properties": {
        "port": {
            "description": "The port the remote debug logger listens to",
            "type": "number",
            "minimum": 1,
            "maximum": 65535
        },
        "activateRemoteLogging": {
            "description": "If true, activates logging using the remote debugger in language server mode.",
            "type": "boolean"
        },
        "layers": {
            "description": "The layers which may be logged.",
            "type": "array",
            "items": {
                "type": "string",
                "enum": ["information", "critical", "communicator", "languageServer", "messager"]
            }
        },
        "errorsInConsoleOutput": {
            "description": "If true, errors are also fully visible in console output. (If the critical logging layer is not active, errors won't be logged anywhere) Otherwise, only a brief explanation of the error is shown. (The full error will be still written to the logfile if configured)",
            "type": "boolean"
        }
    }
}`
	SchemaMap["configuration/predictor-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "predictor-configuration.schema.json",
    "title": "Predictor Configuration",
    "description": "Contains configurations regarding the predictor, which holds the machine learning models.",
    "type": "object",
    "properties": {
        "host": {
            "description": "The host of the predictor",
            "type": "string"
        },
        "port": {
            "description": "The port the predictor listens to for predictions",
            "type": "number",
            "minimum": 1,
            "maximum": 65535
        },
        "skipTraining": {
            "description": "If true, the training process will be skipped",
            "type": "boolean"
        },
        "useMock": {
            "description": "If true, uses the mocked predictor implementation",
            "type": "boolean"
        },
        "defaultContextTypes": {
            "description": "A list of types (simple identifiers) which will be used as default context types in predictor requests.",
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    }
}`
	SchemaMap["configuration/statistics-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "statistics-configuration.schema.json",
    "title": "Statistics Configuration",
    "description": "Contains configurations regarding statistics configurations",
    "type": "object",
    "properties": {
        "skip": {
            "description": "If true, the statistics creation will be skipped",
            "type": "boolean"
        },
        "minOccurencesForMethodsBeforeSumarizationTable": {
            "description": "The minimum amount of occurences for methods to be visible in the Methods before summarization table. If its one, all methods are shown (not recommended)",
            "type": "number",
            "minimum": 0
        },
        "projectGroupingThreshold": {
            "description": "All projects which's value is below this value will be grouped as a 'other projects' value. This does only affect the 'Origins of methods used in the final dataset' pie chart.",
            "type": "number",
            "minimum": 0
        }
    }
}`
	SchemaMap["configuration/language-server-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "language-server-configuration.schema.json",
    "title": "Language Server Configuration",
    "description": "Contains configurations for the language server",
    "type": "object",
    "properties": {
        "models": {
            "description": "Defines which dataset should be used for each model. If for a model type no dataset is defined, then some functionalities which rely on them will not work.",
            "type": "object",
            "properties": {
                "returntypesValidator": {
                    "description": "Identifier for the dataset configuration which should be used for returntypes validation. Can be a list splitted with slashes '/' to reference subsets.",
                    "type": "string"
                },
                "methodGenerator": {
                    "description": "Identifier for the dataset configuration which should be used for generation of method declarations. Can be a list splitted with slashes '/' to reference subsets.",
                    "type": "string"
                }
            }
        }
    }
}`
	SchemaMap["datasets/filter.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "filter.schema.json",
    "title": "Filter",
    "description": "A filter definition",
    "type": "object",
    "properties": {
        "include": {
            "description": "If set, only methods which fulfill the filter configuration are accepted.",
            "anyOf": [{
                "type": "object",
                "$ref": "filter-configuration.schema.json"
            }, {
                "type": "array",
                "items": {
                    "type": "object",
                    "$ref": "filter-configuration.schema.json"
                }
            }]
        },
        "exclude": {
            "description": "If set, all methods fulfilling the filter configuration are not accepted. This is also true for methods which fulfill the filters under the include property.",
            "anyOf": [{
                "type": "object",
                "$ref": "filter-configuration.schema.json"
            }, {
                "type": "array",
                "items": {
                    "type": "object",
                    "$ref": "filter-configuration.schema.json"
                }
            }]
        }
    }
}`
	SchemaMap["datasets/filter-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "filter-configuration.schema.json",
    "title": "FilterConfiguration",
    "description": "Defines which filters should be applied inside a filter. Each properties values are seen as OR-conjunctions while each property is bound by an AND-conjunction.",
    "type": "object",
    "properties": {
        "method": {
            "description": "A list of patterns of method names which should fulfill this filter configuration.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "modifier": {
            "description": "A list of patterns of modifiers which should fulfill this filter configuration. The pattern is applied on each modifier by itself.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "parameter": {
            "description": "A list of patterns of parameters which should fulfill this filter configuration. The pattern is applied on each parameter by itself. Each parameter has the format '[Type] [Name]'.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "label": {
            "description": "A list of patterns of labels which should fulfill this filter configuration. The pattern is applied on each label by itself.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "returntype": {
            "description": "A list of patterns of returntypes which should fulfill this filter configuration.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "classname": {
            "description": "A list of patterns of class names which should fulfill this filter configuration.",
            "type": "array",
            "items": {
                "$ref": "pattern.schema.json",
                "type": ["object", "string"]
            }
        },
        "anyOf": {
            "description": "A list of further filters from which at least one filter needs also to be fulfilled for a match.",
            "type": "array",
            "items": {
                "$ref": "#",
                "type": "object"
            }
        },
        "allOf": {
            "description": "A list of further filters from which at every filter also needs to be fulfilled for a match.",
            "type": "array",
            "items": {
                "$ref": "#",
                "type": "object"
            }
        }
    }
}`
	SchemaMap["datasets/pattern.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "pattern.schema.json",
    "title": "Pattern",
    "description": "Defines a pattern.",
    "type": ["string", "object"],
    "properties": {
        "pattern": {
            "description": "Defines the pattern to count.",
            "type": "string"
        },
	    "type": {
            "description": "Defines how the pattern is to be interpreted.",
            "type": "string",
            "enum": ["regexp", "wildcard", "counter", "length"]
        },
        "min": {
            "description": "Defines the minimum amount for the value to check.",
            "type": "integer"
        },
        "max": {
            "description": "Defines the maximum amount for the value to check.",
            "type": "integer"
        }
    },
    "required": ["type"]
}`
	SchemaMap["datasets/excel-set-config-file.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "excel-set-config-file.schema.json",
    "title": "Excel Set Configuration file",
    "description": "Contains excel sets.",
    "type": "object",
    "properties": {
        "excelSets": {
            "description": "A list of excel sets",
            "type": "array",
            "items": {
                "$ref": "excel-set-configuration.schema.json",
                "type": "object"
            }
        }
    },
    "required": ["excelSets"]
}`
	SchemaMap["datasets/excel-set-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "excel-set-configuration.schema.json",
    "title": "Excel Set Configuration",
    "description": "An excel set configuration.",
    "type": "object",
    "properties": {
        "name": {
            "description": "The name of the set. This name will be used for the output excel file. Subsets will be written into a sub directory with this name.",
            "type": "string"
        },
        "filter": {
            "description": "A filter which is used on each method before doing anything else with it. If the method does not fulfill this filter, then it is not accepted.",
            "type": "object",
            "$ref": "filter.schema.json"
        },
        "noOutput": {
            "description": "If true, then no output is created for accepted methods by this set. Output of subsets might still be created.",
            "type": "boolean"
        },
        "subsets": {
            "description": "A list of subsets which are saved in a sub directory under this dataset's name. As they are subsets, only methods passing the filter of this set will be passed to the subsets.",
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#"
            }
        },
        "complementFilename": {
            "description": "The name of the file where the complement of this set and all of it's subsets is saved to.",
            "type": "string"
        }
    },
    "required": ["name"]
}`
	SchemaMap["projects/project-config-file.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "project-config-file.schema.json",
    "title": "ProjectConfigFile",
    "description": "Contains project definitions",
    "type": "object",
    "properties": {
        "projects": {
            "description": "A list of project definitions",
            "type": ["array", "string"],
            "items": {
                "$ref": "project-definition.schema.json",
                "type": ["object", "string"]
            }
        }
    },
    "required": ["projects"]
}`
	SchemaMap["projects/project-definition.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "project-definition.schema.json",
    "title": "Project",
    "description": "A project definition",
    "type": ["object", "string"],
    "properties": {
        "gitUri": {
            "description": "The URI from where the repository can be cloned using Git",
            "type": "string"
        },
        "directory": {
            "description": "Sets the directory where the project should be loaded from. If a git uri is set and the directory does not exist on the file system, the project will be cloned here. If no directory is set, the project's directory will be {projectInputDir}/{repositoryName}",
            "type": "string"
        },
        "alternativeName": {
            "description": "Sets an alternative name for the repository which is usefull if two different repositories have the same name. If set and the directory attribute is empty, the project's directory will be {projectInputDir}/{alternativeName}",
            "type": "string"
        },
        "javaVersion": {
            "description": "Sets the java version to be used for parsing the project's source code",
            "type": "number"
        }
    },
    "anyOf": [
        {
            "type": "string"
        },
        {
            "type": "object",
            "required": ["gitUri"]
        },
        {
            "type": "object",
            "required": ["directory"]
        }
    ]
}`
	SchemaMap["configuration/evaluation-configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "evaluation-configuration.schema.json",
    "title": "Evaluation Configuration",
    "description": "Contains configurations regarding evaluation",
    "type": "object",
    "properties": {
        "subsets": {
            "description": "Subsets of the evaluation set for which scores should be also calculated (e.g. filter out setter/getter for evaluation and so on)",
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "../datasets/evaluation-set.schema.json"
            }
        }
    }
}`
	SchemaMap["datasets/evaluation-set.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "evaluation-set.schema.json",
    "title": "Evaluation set",
    "description": "Defines an evaluation set.",
    "type": "object",
    "properties": {
        "name": {
            "description": "The name of the set.",
            "type": "string"
        },
        "filter": {
            "description": "A filter which is used on each method before doing anything else with it. If the method does not fulfill this filter, then it is not accepted.",
            "type": "object",
            "$ref": "filter.schema.json"
        },
        "metrics": {
            "description": "Defines which metrics should be used to calculate a score for this set.",
            "type": "array",
            "items": {
                "type": ["object", "string"],
                "$ref": "../metrics/metrics.schema.json"
            }
        },
        "targetModels": {
            "type": "array",
            "$ref": "model-list.schema.json"
        },
        "examples": {
            "description": "A list of method inputs which will also be predicted and saved with their output seperately to a file.",
            "type": "array",
            "items": {
                "type": ["object", "string"],
                "$ref": "method-context.schema.json"
            }
        },
        "subsets": {
            "description": "A list of subsets which are saved in a sub directory under this dataset's name. As they are subsets, only methods passing the filter of this set will be passed to the subsets.",
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#"
            }
        }
    }
}`
	SchemaMap["datasets/method-context.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "method-context.schema.json",
    "title": "Method context",
    "description": "Input data which is used to predict the expected values. May also be a string with the format \"(static )({{ClassName}}.){{MethodName}}\".",
    "type": ["object", "string"],
    "properties": {
        "methodName": {
            "type": "string",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
        },
        "static": {
            "type": "boolean"
        },
        "className": {
            "type": "string",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
        }
    },
    "pattern": "^(static )?([a-zA-Z][a-zA-Z0-9_]*\\.)?[a-zA-Z][a-zA-Z0-9_]*$",
    "required": ["methodName"]
}`
	SchemaMap["datasets/dataset/config-file.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "config-file.schema.json",
    "title": "Dataset Configuration file",
    "description": "Contains datasets.",
    "type": "object",
    "properties": {
        "datasets": {
            "description": "A list of datasets",
            "type": "array",
            "items": {
                "$ref": "configuration.schema.json",
                "type": "object"
            }
        }
    },
    "required": ["datasets"]
}`
	SchemaMap["datasets/dataset/base.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "configuration.schema.json",
    "title": "Dataset Base Configuration",
    "description": "A dataset configuration.",
    "type": "object",
    "properties": {
        "name": {
            "description": "The name of the set. This name will be used for the output file. Subsets will be written into a sub directory with this name.",
            "type": "string",
            "pattern": "^[^/\\?&#:;]+$"
        },
        "description": {
            "description": "A description of the dataset, e.g. which data/options are used and why for documentation purposes.",
            "type": "string"
        },
        "modelOptions": {
            "description": "Defines options which should be applied to the model for creating this dataset",
            "type": "object",
            "$ref": "model-options.schema.json"
        },
        "targetModels": {
            "type": "array",
            "$ref": "../model-list.schema.json"
        },
        "evaluateOn": {
            "description": "Defines, what parts of the model should be evaluated. Defaults to best-model, which means that the finally saved/used model is used for evaluation. For epoch, each saved epoch checkpoint will be separately evaluated, while for steps, this will also be true for all saved steps (including epochs).",
            "type": "string",
            "enum": ["step", "epoch", "best-model"]
        },
        "preprocessingOptions": {
            "type": "object",
            "$ref": "preprocessing-options.schema.json"
        }
    },
    "required": ["name"]
}`
	SchemaMap["datasets/dataset/configuration.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "configuration.schema.json",
    "title": "Dataset Configuration",
    "description": "A dataset configuration.",
    "type": "object",
    "allOf": [{ "$ref": "base.schema.json" }],
    "properties": {
        "filter": {
            "description": "A filter which is used on each method before doing anything else with it. If the method does not fulfill this filter, then it is not accepted.",
            "type": "object",
            "$ref": "../filter.schema.json"
        },
        "creationOptions": {
            "description": "Defines special filter options which are used for creating the dataset. Options are applied before passing to subsets, so overwriting them might not take effect.",
            "type": "object",
            "$ref": "creation-options.schema.json"
        },
        "subsets": {
            "description": "A list of subsets which are saved in a sub directory under this dataset's name. As they are subsets, only methods passing the filter of this set will be passed to the subsets.",
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "#"
            }
        },
        "alternatives": {
            "description": "A list of alternative versions of the dataset. These can be used to try different variants of model options for a dataset and will reuse the exact same output files as the dataset. Therefore it is not possible to define further filters on the methods in the set, as this is already a subset.",
            "type": "array",
            "items": {
                "type": "object",
                "$ref": "base.schema.json"
            }
        }
    }
}`
	SchemaMap["datasets/dataset/model-options.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "model-options.schema.json",
    "title": "Model options",
    "description": "Defines different options which are used for the model.",
    "type": "object",
    "properties": {
        "batchSize": {
            "description": "Defines the size of a batch in the training/evaluation process",
            "type": "integer",
            "minimum": 1
        },
        "numOfEpochs": {
            "description": "Defines the number of training epochs.",
            "type": "integer",
            "minimum": 1
        },
        "numReturnSequences": {
            "description": "Sets the number of expected return sequences to predict different suggestions",
            "type": "integer",
            "minimum": 1
        },
        "maxSequenceLength": {
            "description": "Sets the maximum length of the predicted sequence",
            "type": "integer",
            "minimum": 1
        },
        "useContextTypes": {
            "description": "If true, the types available in a file are also sent to the predictor and used for training.",
            "type": "boolean"
        },
        "emptyParameterListByKeyword": {
            "description": "If true, a keyword (like 'void') is used to indicate no output.",
            "type": "boolean"
        },
        "adafactor": {
            "description": "Settings for adafactor optimizer",
            "type": "object",
            "$ref": "adafactor.schema.json"
        },
        "adam": {
            "description": "Settings for adam optimizer",
            "type": "object",
            "$ref": "adam.schema.json"
        },
        "modelType": {
            "description": "Defines, which model type should be used for the given task.",
            "type": "string",
            "enum": ["t5", "bart"]
        },
        "modelName": {
            "description": "Defines, which model should be used for the given task.",
            "type": "string"
        },
        "numBeams": {
            "type": "integer",
            "minimum": 1
        },
        "lengthPenalty": {
            "type": "number"
        },
        "topK": {
            "type": "number",
            "minimum": 0
        },
        "topN": {
            "type": "number",
            "minimum": 0
        },
        "outputOrder": {
            "type": "array",
            "description": "Defines, how the output sequence is ordered. If defined, the array must consist each of the 'returnType', 'parameterName', 'parameterType' tokens exactly once. Also, 'returnType' must not come between the parameter tokens.",
            "minItems": 3,
            "maxItems": 3,
            "items": {
                "type": "string",
                "enum": ["returnType", "parameterName", "parameterType"]
            }
        }
    }
}`
	SchemaMap["datasets/dataset/creation-options.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "creation-options.schema.json",
    "title": "Creation options",
    "description": "Defines options concerning the creation of the dataset files. Changing the values will not take effect if a csv file for the dataset does already exist.",
    "type": "object",
    "properties": {
        "maxTokensPerOutputSequence": {
            "description": "Sets maximum number of tokens per output sequence.",
            "type": "number"
        },
        "filterDuplicates": {
            "description": "",
            "type": "boolean"
        },
        "typeClasses": {
            "description": "Configurations for type classes. Can also be a string pointing to a json file containing type class definitions.",
            "type": ["string", "array"],
            "items": {
                "$ref": "../../typeclasses/typeclass.schema.json",
                "type": "object"
            }
        },
        "datasetSize": {
            "description": "The size of the splitted datasets as a proportion. This property can be redefined by each subset.",
            "type": "object",
            "$ref": "dataset-size.schema.json"
        }
    }
}`
	SchemaMap["datasets/dataset/preprocessing-options.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "preprocessing-options.schema.json",
    "title": "Preprocessing options",
    "description": "Defines some operations which might be applied to the data sent to the predictor after the actual dataset files were created.",
    "type": "object",
    "properties": {
        "maxTrainingRows": {
            "description": "The maximum number of rows used for training the dataset. If this value is 0 or unset or exceeds the number of rows, then all rows are used.",
            "type": "integer",
            "minimum": 0
        },
        "maxEvaluationRows": {
            "description": "The maximum number of rows used for evaluating the dataset. If this value is 0 or unset or exceeds the number of rows, then all rows are used.",
            "type": "integer",
            "minimum": 0
        },
        "sentenceFormatting": {
            "description": "If true, all names (method name, type name, parameter name) are formatted into sentences for the model. Might also be an object, where it is possible to define this setting per name type.",
            "type": ["boolean", "object"],
            "properties": {
                "methodName": {
                    "description": "If true, method names are splitted into sentences.",
                    "type": "boolean"
                },
                "typeName": {
                    "description": "If true, all type names are splitted into sentences. This does not affect type classes.",
                    "type": "boolean"
                },
                "parameterName": {
                    "description": "If true, parameter names are splitted into sentences.",
                    "type": "boolean"
                }
            }
        }
    }
}`
	SchemaMap["datasets/dataset/dataset-size.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "dataset-size.schema.json",
    "title": "Dataset size",
    "description": "Properties to define size proportions of a dataset when splitting into multiple sets.",
    "type": "object",
    "properties": {
        "training": {
            "description": "The size of the training set compared with the evaluation set.",
            "type": "number",
            "minimum": 0
        },
        "evaluation": {
            "description": "The size of the evaluation set compared with the training set.",
            "type": "number",
            "minimum": 0
        }
    },
    "required": ["training", "evaluation"],
    "anyOf": [{
        "properties": {
            "training": {
                "minimum": 1
            }
        }
    },{
        "properties": {
            "evaluation": {
                "minimum": 1
            }
        }
    }]
}`
	SchemaMap["datasets/dataset/adam.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "adam.schema.json",
    "title": "Adam optimizer options",
    "description": "Defines options used for the adam optimizer.",
    "type": "object",
    "properties": {
        "learningRate": {
            "type": "number"
        },
        "eps": {
            "type": "number"
        }
    }
}`
	SchemaMap["datasets/dataset/adafactor.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "adafactor.schema.json",
    "title": "Adafactor options",
    "description": "Defines options used for adafactor optimizer.",
    "type": "object",
    "properties": {
        "beta": {
            "type": "number"
        },
        "clipThreshold": {
            "type": "number"
        },
        "decayRate": {
            "type": "number"
        },
        "eps": {
            "type": "array",
            "items": {
                "type": "number"
            }
        },
        "relativeStep": {
            "type": "boolean"
        },
        "warmupInit": {
            "type": "boolean"
        },
        "scaleParameter": {
            "type": "boolean"
        }
    }
}`
	SchemaMap["typeclasses/typeclass-config-file.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "typeclass-config-file.schema.json",
    "title": "Type class configuration file",
    "description": "Contains type class definitions",
    "type": "object",
    "properties": {
        "classes": {
            "description": "A list of type class definitions",
            "type": ["array"],
            "items": {
                "$ref": "typeclass.schema.json",
                "type": "object"
            }
        }
    },
    "required": ["classes"]
}`
	SchemaMap["typeclasses/typeclass.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "typeclass.schema.json",
    "title": "Type class",
    "description": "A type class definition",
    "type": "object",
    "properties": {
		"label": {
            "description": "The name of this type class which is also used to replace the acutal types to.",
            "type": "string"
        },
		"elements": {
            "description": "A list of canonical names for types which belong to this type class. This includes also all types extending these types.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        },
		"isArrayType": {
            "description": "If true, then this type class should also contain array types. Can only be defined on a maximum of one type class.",
            "type": "boolean"
        },
		"color": {
            "description": "A hex string defining the color used for color representations of this type class in statistics etc.",
            "type": "string",
            "pattern": "^#[0-9a-fA-F]{6}"
        },
        "isChainMethodType": {
            "description": "If true, then this type class should also contain chain methods. Can only be defined on a maximum of one type class.",
            "type": "boolean"
        }
    },
    "required": ["label", "elements"]
}`
	SchemaMap["metrics/metrics.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "metrics.schema.json",
    "title": "Metrics",
    "description": "Type for all possible metric types.",
    "type": ["string", "object"],
    "enum": ["rouge-l", "rouge-s", "rouge-2", "bleu", "tokenCounter", "exactMatch", "compilability"],
    "anyOf": [
        {"type": "string"},
        {"type": "object", "$ref": "rouge-l.schema.json"},
        {"type": "object", "$ref": "rouge-s.schema.json"},
        {"type": "object", "$ref": "rouge-n.schema.json"},
        {"type": "object", "$ref": "bleu.schema.json"}
    ]
}`
	SchemaMap["metrics/bleu.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "bleu.schema.json",
    "title": "Bleu",
    "description": "Bleu score metric definition",
    "type": "object",
    "properties": {
        "type": {
            "type": "string",
            "enum": ["bleu"]
        },
        "weights": {
            "type": "array",
            "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
            },
            "default": [0.25, 0.25, 0.25, 0.25],
            "description": "The weights which apply to each n-gram precision. The length of this array defines, which n-grams should be used. The sum of the weights should be exactly 1."
        }
    },
    "required": ["type"]
}`
	SchemaMap["metrics/rouge-l.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "rouge-l.schema.json",
    "title": "Rouge-L",
    "description": "Rouge-L metric definition",
    "type": "object",
    "properties": {
        "type": {
            "type": "string",
            "enum": ["rouge-l"]
        },
        "measure": {
            "type": ["object", "string"],
            "$ref": "measures.schema.json"
        }
    },
    "required": ["type"]
}`
	SchemaMap["metrics/rouge-n.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "rouge-n.schema.json",
    "title": "Rouge-N",
    "description": "Rouge-N metric definition",
    "type": "object",
    "properties": {
        "type": {
            "type": "string",
            "enum": ["rouge-n"]
        },
        "n": {
            "type": "number",
            "description": "Defines, which type of n-grams should be used.",
            "default": 1,
            "minimum": 1
        },
        "measure": {
            "type": ["object", "string"],
            "$ref": "measures.schema.json"
        }
    },
    "required": ["type"]
}`
	SchemaMap["metrics/rouge-s.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "rouge-s.schema.json",
    "title": "Rouge-S",
    "description": "Rouge-S metric definition",
    "type": "object",
    "properties": {
        "type": {
            "type": "string",
            "enum": ["rouge-s"]
        },
        "skipN": {
            "type": "number",
            "default": 1,
            "minimum": 1
        },
        "measure": {
            "type": ["object", "string"],
            "$ref": "measures.schema.json"
        }
    },
    "required": ["type"]
}`
	SchemaMap["metrics/measures.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "measures.schema.json",
    "title": "Measures",
    "description": "Type for all possible measures types.",
    "type": ["string", "object"],
    "enum": ["f1score"],
    "anyOf": [
        {"type": "string"},
        {"type": "object", "$ref": "fscore.schema.json"}
    ]
}`
	SchemaMap["metrics/fscore.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "fscore.schema.json",
    "title": "F-Score",
    "description": "Definition for f-score calculation",
    "type": "object",
    "properties": {
        "type": {
            "type": "string",
            "enum": ["fscore"]
        },
        "beta": {
            "type": "number",
            "default": 1
        }
    },
    "required": ["type"]
}`
	SchemaMap["datasets/model-list.schema.json"] = `{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "model-list.schema.json",
    "title": "Model list",
    "description": "A list of model types for which this evaluation set (including it's subsets) should be used. If empty, the set is used for all models.",
    "type": "array",
    "items": {
        "type": "string",
        "enum": ["ReturnTypesValidator", "MethodGenerator"]
    }
}`
}

func getSchemaMap() map[string]string {
	if SchemaMap == nil {
		initSchemaMap()
	}
	return SchemaMap
}
